import pandas as pd
import pyodbc
import tkinter as tk
from tkinter import messagebox, simpledialog, filedialog, scrolledtext
from tkinter import ttk  # For progress bar
import threading
import time
import os
import numpy as np

class DatabaseAnalyzerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Database Analyzer")
        self.root.geometry("1000x900")
        self.connection_details = {}
        self.queries = []
        self.dataframes = {}
        self.report_df = pd.DataFrame()
        self.start_time = None

        # Initialize the GUI
        self.setup_gui()

    def setup_gui(self):
        # Frame for database connection details
        conn_frame = tk.LabelFrame(self.root, text="Database Connection Details", padx=10, pady=10)
        conn_frame.pack(fill="x", padx=10, pady=5)

        tk.Label(conn_frame, text="Server Name:").grid(row=0, column=0, sticky='e')
        self.server_entry = tk.Entry(conn_frame, width=50)
        self.server_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(conn_frame, text="Database Name:").grid(row=1, column=0, sticky='e')
        self.database_entry = tk.Entry(conn_frame, width=50)
        self.database_entry.grid(row=1, column=1, padx=5, pady=5)

        # Button to save connection details
        save_conn_btn = tk.Button(conn_frame, text="Save Connection Details", command=self.save_connection_details, bg="#4CAF50", fg="white")
        save_conn_btn.grid(row=2, column=0, columnspan=2, pady=5)

        # Button to add queries
        add_query_btn = tk.Button(self.root, text="Add SQL Queries", command=self.add_queries, bg="#2196F3", fg="white")
        add_query_btn.pack(pady=10)

        # Text area to display the queries
        queries_frame = tk.LabelFrame(self.root, text="Added SQL Queries", padx=10, pady=10)
        queries_frame.pack(fill="both", expand=True, padx=10, pady=5)

        self.query_display = scrolledtext.ScrolledText(queries_frame, width=120, height=15, state='disabled')
        self.query_display.pack()

        # Progress bar and percentage label
        progress_frame = tk.Frame(self.root)
        progress_frame.pack(fill="x", padx=10, pady=5)

        self.progress_bar = ttk.Progressbar(progress_frame, orient='horizontal', length=800, mode='determinate')
        self.progress_bar.pack(side='left', padx=5)

        self.progress_label = tk.Label(progress_frame, text="0%")
        self.progress_label.pack(side='left')

        # Estimated time label
        self.time_label = tk.Label(self.root, text="Estimated time remaining: N/A")
        self.time_label.pack(pady=5)

        # Button to perform analysis
        analyze_btn = tk.Button(self.root, text="Perform Analysis", command=self.start_analysis, bg="#008CBA", fg="white")
        analyze_btn.pack(pady=10)

        # Text area to display the relationship report
        report_frame = tk.LabelFrame(self.root, text="Relationship Report", padx=10, pady=10)
        report_frame.pack(fill="both", expand=True, padx=10, pady=5)

        self.report_display = scrolledtext.ScrolledText(report_frame, width=120, height=20, state='disabled')
        self.report_display.pack()

        # Button to export the report to Excel
        export_btn = tk.Button(self.root, text="Export Report to Excel", command=self.export_report, bg="#FF9800", fg="white")
        export_btn.pack(pady=10)

    def save_connection_details(self):
        """
        Saves the server and database names entered by the user.
        """
        server = self.server_entry.get().strip()
        database = self.database_entry.get().strip()

        if not server or not database:
            messagebox.showwarning("Input Required", "Please enter both server name and database name.")
            return

        self.connection_details['server'] = server
        self.connection_details['database'] = database

        messagebox.showinfo("Success", "Connection details saved successfully.")

    def get_db_connection(self):
        """
        Establishes a connection to the SQL Server database using Windows Authentication.
        Returns:
            pyodbc.Connection: Database connection object.
        """
        if not self.connection_details.get('server') or not self.connection_details.get('database'):
            messagebox.showwarning("Connection Details Missing", "Please save the connection details first.")
            return None

        try:
            conn = pyodbc.connect(
                f'DRIVER={{ODBC Driver 17 for SQL Server}};'
                f'SERVER={self.connection_details["server"]};'
                f'DATABASE={self.connection_details["database"]};'
                f'Trusted_Connection=yes;'
                f'autocommit=True'
            )
            return conn
        except Exception as e:
            messagebox.showerror("Connection Error", f"Error connecting to the database:\n{e}")
            return None

    def add_queries(self):
        if not self.connection_details.get('server') or not self.connection_details.get('database'):
            messagebox.showwarning("Connection Details Missing", "Please save the connection details first.")
            return

        # Loop to add multiple queries
        while True:
            query = simpledialog.askstring("Input", "Enter your SQL SELECT query:", parent=self.root)
            if query:
                query = query.strip()
                if not query.lower().startswith("select"):
                    proceed = messagebox.askyesno("Confirm", "The query does not start with SELECT. Do you want to proceed?")
                    if not proceed:
                        continue
                query_name = simpledialog.askstring("Input", "Enter a name for this query:", parent=self.root)
                if not query_name:
                    query_name = f"Query {len(self.queries) + 1}"
                self.queries.append({'query': query, 'name': query_name})

                # Display the query in the text area
                self.query_display.config(state='normal')
                self.query_display.insert(tk.END, f"{query_name}:\n{query}\n\n")
                self.query_display.config(state='disabled')
            else:
                break  # Stop if the user cancels or doesn't enter a query

            # Ask if the user wants to add another query
            add_another = messagebox.askyesno("Add Another?", "Do you want to add another SQL query?")
            if not add_another:
                break

    def start_analysis(self):
        """
        Starts the analysis process in a separate thread to keep the GUI responsive.
        """
        if not self.queries:
            messagebox.showwarning("No Queries", "Please add at least one SQL query before performing analysis.")
            return

        # Disable the analyze button to prevent multiple clicks
        self.root.config(cursor="wait")
        threading.Thread(target=self.perform_analysis).start()

    def perform_analysis(self):
        """
        Performs matching and relationship analysis between the DataFrames.
        """
        conn = self.get_db_connection()
        if not conn:
            self.root.config(cursor="")
            return

        total_queries = len(self.queries)
        self.progress_bar['maximum'] = total_queries
        self.progress_bar['value'] = 0
        self.update_progress(0)
        self.start_time = time.time()

        for idx, q in enumerate(self.queries, 1):
            query = q['query']
            name = q['name']
            try:
                # Execute the query and load into DataFrame
                df = pd.read_sql_query(query, conn)
                if df.empty:
                    message = f"'{name}' DataFrame is empty.\n"
                    self.log_status(message)
                else:
                    self.dataframes[name] = df
                    message = f"'{name}' DataFrame loaded successfully. Shape: {df.shape}\n"
                    self.log_status(message)
            except Exception as e:
                message = f"Error executing '{name}': {e}\n"
                self.log_status(message)
            finally:
                # Update progress
                self.progress_bar['value'] = idx
                percent_complete = int((idx / total_queries) * 100)
                self.update_progress(percent_complete)

                # Update estimated time remaining
                elapsed_time = time.time() - self.start_time
                average_time_per_query = elapsed_time / idx
                estimated_total_time = average_time_per_query * total_queries
                estimated_time_remaining = estimated_total_time - elapsed_time
                self.update_time_label(estimated_time_remaining)

        conn.close()

        # After loading all DataFrames, perform relationship analysis
        self.analyze_relationships()

        # Reset cursor
        self.root.config(cursor="")

    def analyze_relationships(self):
        """
        Analyzes relationships between loaded DataFrames.
        """
        results = []
        df_names = list(self.dataframes.keys())

        for i in range(len(df_names)):
            df1_name = df_names[i]
            df1 = self.dataframes[df1_name]
            for j in range(i+1, len(df_names)):
                df2_name = df_names[j]
                df2 = self.dataframes[df2_name]

                # Compare columns with the same data type
                for col1 in df1.columns:
                    for col2 in df2.columns:
                        if df1[col1].dtype == df2[col2].dtype:
                            # Calculate relationship
                            merged = pd.merge(df1[[col1]].drop_duplicates(), df2[[col2]].drop_duplicates(), left_on=col1, right_on=col2, how='inner')
                            if not merged.empty:
                                # Determine relationship type
                                unique_df1 = df1[col1].nunique()
                                total_df1 = len(df1[col1])
                                unique_df2 = df2[col2].nunique()
                                total_df2 = len(df2[col2])

                                if unique_df1 == total_df1 and unique_df2 == total_df2:
                                    relationship = 'One-to-One'
                                elif unique_df1 == total_df1:
                                    relationship = 'One-to-Many'
                                elif unique_df2 == total_df2:
                                    relationship = 'Many-to-One'
                                else:
                                    relationship = 'Many-to-Many'

                                results.append({
                                    'Table1': df1_name,
                                    'Column1': col1,
                                    'Table2': df2_name,
                                    'Column2': col2,
                                    'Relationship': relationship
                                })

                                rel_message = f"Found {relationship} relationship between '{df1_name}.{col1}' and '{df2_name}.{col2}'.\n"
                                self.log_status(rel_message)

        if results:
            self.report_df = pd.DataFrame(results)
            self.report_display.config(state='normal')
            self.report_display.delete('1.0', tk.END)
            self.report_display.insert(tk.END, self.report_df.to_string(index=False))
            self.report_display.config(state='disabled')
            messagebox.showinfo("Analysis Complete", "Relationship analysis completed successfully.")
        else:
            messagebox.showinfo("No Relationships", "No significant relationships found between the queries.")
            self.report_display.config(state='normal')
            self.report_display.delete('1.0', tk.END)
            self.report_display.config(state='disabled')

    def log_status(self, message):
        """
        Logs messages to the query display area.
        """
        self.query_display.config(state='normal')
        self.query_display.insert(tk.END, message)
        self.query_display.see(tk.END)
        self.query_display.config(state='disabled')

    def update_progress(self, percent):
        """
        Updates the progress bar and percentage label.
        """
        self.progress_label.config(text=f"{percent}%")

    def update_time_label(self, seconds_remaining):
        """
        Updates the estimated time remaining label.
        """
        minutes, seconds = divmod(int(seconds_remaining), 60)
        hours, minutes = divmod(minutes, 60)
        if hours > 0:
            time_str = f"{hours}h {minutes}m {seconds}s"
        elif minutes > 0:
            time_str = f"{minutes}m {seconds}s"
        else:
            time_str = f"{seconds}s"
        self.time_label.config(text=f"Estimated time remaining: {time_str}")

    def export_report(self):
        """
        Exports the relationship report to an Excel file.
        """
        if hasattr(self, 'report_df') and not self.report_df.empty:
            file_path = filedialog.asksaveasfilename(defaultextension='.xlsx',
                                                     filetypes=[('Excel Files', '*.xlsx')],
                                                     title="Save Report As")
            if file_path:
                try:
                    self.report_df.to_excel(file_path, index=False, engine='xlsxwriter')
                    messagebox.showinfo("Success", f"Report successfully saved to:\n{file_path}")
                except Exception as e:
                    messagebox.showerror("Export Error", f"Error saving report:\n{e}")
        else:
            messagebox.showwarning("No Report", "There is no report to export. Please perform analysis first.")

def main():
    root = tk.Tk()
    app = DatabaseAnalyzerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
